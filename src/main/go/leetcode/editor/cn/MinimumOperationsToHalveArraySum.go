//2208.minimum-operations-to-halve-array-sum
//给你一个正整数数组 nums 。每一次操作中，你可以从 nums 中选择 任意 一个数并将它减小到 恰好 一半。（注意，在后续操作中你可以对减半过的数继续执
//行操作）
//
// 请你返回将 nums 数组和 至少 减少一半的 最少 操作数。
//
//
//
// 示例 1：
//
// 输入：nums = [5,19,8,1]
//输出：3
//解释：初始 nums 的和为 5 + 19 + 8 + 1 = 33 。
//以下是将数组和减少至少一半的一种方法：
//选择数字 19 并减小为 9.5 。
//选择数字 9.5 并减小为 4.75 。
//选择数字 8 并减小为 4 。
//最终数组为 [5, 4.75, 4, 1] ，和为 5 + 4.75 + 4 + 1 = 14.75 。
//nums 的和减小了 33 - 14.75 = 18.25 ，减小的部分超过了初始数组和的一半，18.25 >= 33/2 = 16.5 。
//我们需要 3 个操作实现题目要求，所以返回 3 。
//可以证明，无法通过少于 3 个操作使数组和减少至少一半。
//
//
// 示例 2：
//
// 输入：nums = [3,8,20]
//输出：3
//解释：初始 nums 的和为 3 + 8 + 20 = 31 。
//以下是将数组和减少至少一半的一种方法：
//选择数字 20 并减小为 10 。
//选择数字 10 并减小为 5 。
//选择数字 3 并减小为 1.5 。
//最终数组为 [1.5, 8, 5] ，和为 1.5 + 8 + 5 = 14.5 。
//nums 的和减小了 31 - 14.5 = 16.5 ，减小的部分超过了初始数组和的一半， 16.5 >= 31/2 = 16.5 。
//我们需要 3 个操作实现题目要求，所以返回 3 。
//可以证明，无法通过少于 3 个操作使数组和减少至少一半。
//
//
//
//
// 提示：
//
//
// 1 <= nums.length <= 10⁵
// 1 <= nums[i] <= 10⁷
//
//
// Related Topics 贪心 数组 堆（优先队列） 👍 39 👎 0

package main

import (
	"container/heap"
	"fmt"
)

//leetcode submit region begin(Prohibit modification and deletion)

type IntHeap []float64

func (h IntHeap) Len() int { return len(h) }
func (h IntHeap) Less(i, j int) bool { // 绑定less方法
	// 小顶堆：h[i]<h[j]；大顶堆：h[i]>h[j]
	return h[i] > h[j]
}
func (h IntHeap) Swap(i, j int) { // 绑定swap方法，交换两个元素位置
	h[i], h[j] = h[j], h[i]
}

// Pop 绑定pop方法，从最后拿出一个元素并返回
func (h *IntHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}

func (h IntHeap) Peek() float64 {
	return h[0]
}

// Push 绑定push方法，插入新元素
func (h *IntHeap) Push(x interface{}) {
	*h = append(*h, x.(float64))
}
func halveArray(nums []int) int {
	var h = &IntHeap{}
	sum := 0.0
	for _, num := range nums {
		heap.Push(h, float64(num))
		sum += float64(num)
	}
	half := sum / 2
	res := 0
	for sum > half {
		max := heap.Pop(h).(float64)
		max = max / 2
		sum -= max
		res++
		heap.Push(h, max)
	}
	return res
}

//leetcode submit region end(Prohibit modification and deletion)

// test from here
func main() {
	//fmt.Println(halveArray([]int{5, 19, 8, 1}))
	nums := []int{8739035, 4901127, 4338327, 7360836, 7837064, 5211625, 2177427, 3500276, 8900040, 6943981, 4543076, 2942668, 6051674, 3220114, 3262038, 3557549, 141194, 2701009, 6314605, 7356081, 9869665, 7790170, 5178948, 8696456, 6125816, 6340599, 7227799, 4779784, 9441851, 1189923, 2619397, 1404977, 4583528, 589727, 9594310, 9307751, 4349903, 8474185, 5817649, 311108, 1982300, 7621863, 4763374, 1388329, 8722192, 6509592, 2695470, 4257740, 5077523, 5583403, 3250002, 5086789, 6927117, 8487669, 6397280, 6857962, 9307359, 1097462, 8982016, 7505708, 7605823, 2262503, 2168554, 397737, 3056483, 8747777, 6260940, 9591312, 5381584, 9169381, 9353145, 9485955, 6270041, 8516266, 4981579, 8633883, 6903201, 9258037, 1673755, 766548, 4290448, 2071704, 563560, 5256806, 1715053, 3412224, 2324599, 1684842, 2461592, 1427529, 6521179, 1697580, 2865998, 6914529, 5365631, 7665088, 3638760, 3508330, 1334821, 4163858, 1653016, 9349122, 8375044, 4741012, 9731759, 8184146}

	fmt.Println(halveArray(nums))
}
