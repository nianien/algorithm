//编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。 
//
// 
//
// 提示： 
//
// 
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的
//还是无符号的，其内部的二进制表示形式都是相同的。 
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。 
// 
//
// 
//
// 示例 1： 
//
// 
//输入：00000000000000000000000000001011
//输出：3
//解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
// 
//
// 示例 2： 
//
// 
//输入：00000000000000000000000010000000
//输出：1
//解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
// 
//
// 示例 3： 
//
// 
//输入：11111111111111111111111111111101
//输出：31
//解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。 
//
// 
//
// 提示： 
//
// 
// 输入必须是长度为 32 的 二进制串 。 
// 
//
// 
// 
//
// 
//
// 进阶： 
//
// 
// 如果多次调用这个函数，你将如何优化你的算法？ 
// 
// Related Topics 位运算 
// 👍 333 👎 0


package leetcode.editor.cn;

public class NumberOf1Bits {
    public static void main(String[] args) {
        Solution solution = new NumberOf1Bits().new Solution();
        System.out.println(solution.hammingWeight(11));
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    public class Solution {
        // you need to treat n as an unsigned value
        public int hammingWeight1(int n) {
            int ret = 0;
            while (n != 0) {
                //该操作可使最低位的1变0
                n &= n - 1;
                ret++;
            }
            return ret;
        }

        public int hammingWeight2(int n) {
            int ret = 0;
            for (int i = 0; i < 32; i++) {
                //从高位与运算
                if ((n & (1 << i)) != 0) {
                    ret++;
                }
            }
            return ret;
        }

        public int hammingWeight(int i) {
            //0x55555555 二进制 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
            //每两位统计1的个数，并把结果放在对应的原来位置上
            //两位二进制表示:        00,01,10,11
            //右移一位与1运算:       00,00,01,01
            //二者相减,恰好为1的个数: 00,01,01,10
            i = i - ((i >>> 1) & 0x55555555);
            //0x33333333 二进制 00 11 00 11 00 11 00 11 00 11 00 11 00 11 00 11
            //i & 0x33333333表示每四位中底两位的值
            //(i >>> 2) & 0x33333333表示每四位中高两位的值
            //二者相加表示每四位中1的个数
            i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);
            //0x0f0f0f0f 二进制 0000 1111 0000 1111 0000 1111 0000 1111
            //每8位表示1的个数
            i = (i + (i >>> 4)) & 0x0f0f0f0f;
            //将高8位的结果加到低8位上得到每16位1的个数, 高位忽略
            i = i + (i >>> 8);
            //将高16位的结果加到低16位上得到每16位1的个数, 高位忽略
            i = i + (i >>> 16);
            //低16位的结果就是整体1的个数
            return i & 0x3f;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}